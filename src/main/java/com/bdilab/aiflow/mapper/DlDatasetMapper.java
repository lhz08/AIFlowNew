package com.bdilab.aiflow.mapper;


import com.bdilab.aiflow.model.DlDataset;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Mapper;
import java.util.List;

@Mapper
public interface DlDatasetMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dl_dataset
     *
     * @mbg.generated Mon Jan 25 13:13:31 CST 2021
     */
    boolean deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dl_dataset
     *
     * @mbg.generated Mon Jan 25 13:13:31 CST 2021
     */
    boolean insert(DlDataset record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dl_dataset
     *
     * @mbg.generated Mon Jan 25 13:13:31 CST 2021
     */
    boolean insertSelective(DlDataset record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dl_dataset
     *
     * @mbg.generated Mon Jan 25 13:13:31 CST 2021
     */
    DlDataset selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dl_dataset
     *
     * @mbg.generated Mon Jan 25 13:13:31 CST 2021
     */
    int updateByPrimaryKeySelective(DlDataset record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dl_dataset
     *
     * @mbg.generated Mon Jan 25 13:13:31 CST 2021
     */
    int updateByPrimaryKey(DlDataset record);

    List<DlDataset> fuzzySelectPublicDlDatasetByName(String datasetName);

    List<DlDataset> fuzzySelectUserDlDatasetByName(@Param("userId")Integer userId, @Param("datasetName")String datasetName);

    List<DlDataset> fuzzySelectPublicDlDatasetByTags(String datasetTags);

    List<DlDataset> fuzzySelectUserDlDatasetByTags(@Param("userId")Integer userId, @Param("datasetTags")String datasetTags);

    List<DlDataset> getPublicDldataset();

    List<DlDataset> getUserDldataset(Integer userId);

    boolean deleteDldatasetById(Integer datasetId);

    DlDataset selectDldatasetById(int datasetId);

    boolean deleteDldatasetCompletelyById(int datasetId);

    List<DlDataset> getDldatasetInTrash(Integer userId);

    boolean restoreDldataset(int datasetId);
}